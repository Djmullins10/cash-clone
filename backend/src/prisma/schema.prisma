// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  cashTag     String            @unique
  email       Email[]
  password    String
  loginCode   VerificationCode?
  firstName   String
  lastName    String
  username    String?
  pinNumber   String
  phoneNumber PhoneNumber[]
  card        Card?
  balance     Float             @default(0)
  accounts    BankAccount[]
  settings    Settings?
  addresses   MailingAddress[]
}

model VerificationCode {
  userId    String   @id
  updatedAt DateTime @updatedAt
  code      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PhoneNumber {
  phoneNumber String @id
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model Email {
  email  String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model MailingAddress {
  address String
  city    String
  state   String
  zip     String
  unit    String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  @@id([userId, address])
}

enum PrivacySetting {
  all
  none
  contacts
}

model Settings {
  userId   String         @id
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  allowPay Boolean        @default(true)
  privacy  PrivacySetting @default(all)
}

model Card {
  cardNumber    String   @id
  cardActivated Boolean? @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String   @unique
}

model BankAccount {
  name          String
  accountNumber String
  routingNumber String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String

  @@id([accountNumber, routingNumber])
}

// logged out JWT tokens
model Blacklist {
  token      String   @id
  expiration DateTime @default(now())
}
