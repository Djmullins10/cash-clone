// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  cashTag     String           @unique
  email       Email[]
  password    String
  firstName   String
  lastName    String
  username    String?
  pinNumber   String
  phoneNumber PhoneNumber[]
  card        Card?
  balance     Float            @default(0)
  accounts    BankAccount[]
  settings    Settings?
  addresses   MailingAddress[]
}

model PhoneNumber {
  phoneNumber String  @unique
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String?
}

model Email {
  email  String  @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?
}

model MailingAddress {
  id      Int     @id @default(autoincrement())
  address String
  city    String
  state   String
  zip     String
  unit    String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String?
}

enum PrivacySetting {
  all
  none
  contacts
}

model Settings {
  id       Int            @id @default(autoincrement())
  userId   String?        @unique
  user     User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  allowPay Boolean        @default(true)
  privacy  PrivacySetting @default(all)
}

model Card {
  id            Int      @id @default(autoincrement())
  // XXX: unique
  cardNumber    String
  cardActivated Boolean? @default(false)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?  @unique
}

model BankAccount {
  id            Int     @id @default(autoincrement())
  name          String
  accountNumber String
  routingNumber String
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?
}
